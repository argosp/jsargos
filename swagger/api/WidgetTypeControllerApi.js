/**
 * Thingsboard REST API
 * For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.
 *
 * OpenAPI spec version: 2.0
 * Contact: info@thingsboard.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/WidgetType'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/WidgetType'));
  } else {
    // Browser globals (root is window)
    if (!root.ThingsboardRestApi) {
      root.ThingsboardRestApi = {};
    }
    root.ThingsboardRestApi.WidgetTypeControllerApi = factory(root.ThingsboardRestApi.ApiClient, root.ThingsboardRestApi.WidgetType);
  }
}(this, function(ApiClient, WidgetType) {
  'use strict';

  /**
   * WidgetTypeController service.
   * @module api/WidgetTypeControllerApi
   * @version 2.0
   */

  /**
   * Constructs a new WidgetTypeControllerApi. 
   * @alias module:api/WidgetTypeControllerApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteWidgetTypeUsingDELETE operation.
     * @callback module:api/WidgetTypeControllerApi~deleteWidgetTypeUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteWidgetType
     * @param {String} widgetTypeId widgetTypeId
     * @param {module:api/WidgetTypeControllerApi~deleteWidgetTypeUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteWidgetTypeUsingDELETE = function(widgetTypeId, callback) {
      var postBody = null;

      // verify the required parameter 'widgetTypeId' is set
      if (widgetTypeId === undefined || widgetTypeId === null) {
        throw new Error("Missing the required parameter 'widgetTypeId' when calling deleteWidgetTypeUsingDELETE");
      }


      var pathParams = {
        'widgetTypeId': widgetTypeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/widgetType/{widgetTypeId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getBundleWidgetTypesUsingGET operation.
     * @callback module:api/WidgetTypeControllerApi~getBundleWidgetTypesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WidgetType>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getBundleWidgetTypes
     * @param {String} isSystem isSystem
     * @param {String} bundleAlias bundleAlias
     * @param {module:api/WidgetTypeControllerApi~getBundleWidgetTypesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WidgetType>}
     */
    this.getBundleWidgetTypesUsingGET = function(isSystem, bundleAlias, callback) {
      var postBody = null;

      // verify the required parameter 'isSystem' is set
      if (isSystem === undefined || isSystem === null) {
        throw new Error("Missing the required parameter 'isSystem' when calling getBundleWidgetTypesUsingGET");
      }

      // verify the required parameter 'bundleAlias' is set
      if (bundleAlias === undefined || bundleAlias === null) {
        throw new Error("Missing the required parameter 'bundleAlias' when calling getBundleWidgetTypesUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'isSystem': isSystem,
        'bundleAlias': bundleAlias,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [WidgetType];

      return this.apiClient.callApi(
        '/api/widgetTypes{?isSystem,bundleAlias}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWidgetTypeByIdUsingGET operation.
     * @callback module:api/WidgetTypeControllerApi~getWidgetTypeByIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WidgetType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getWidgetTypeById
     * @param {String} widgetTypeId widgetTypeId
     * @param {module:api/WidgetTypeControllerApi~getWidgetTypeByIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WidgetType}
     */
    this.getWidgetTypeByIdUsingGET = function(widgetTypeId, callback) {
      var postBody = null;

      // verify the required parameter 'widgetTypeId' is set
      if (widgetTypeId === undefined || widgetTypeId === null) {
        throw new Error("Missing the required parameter 'widgetTypeId' when calling getWidgetTypeByIdUsingGET");
      }


      var pathParams = {
        'widgetTypeId': widgetTypeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = WidgetType;

      return this.apiClient.callApi(
        '/api/widgetType/{widgetTypeId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWidgetTypeUsingGET operation.
     * @callback module:api/WidgetTypeControllerApi~getWidgetTypeUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WidgetType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getWidgetType
     * @param {String} isSystem isSystem
     * @param {String} bundleAlias bundleAlias
     * @param {String} alias alias
     * @param {module:api/WidgetTypeControllerApi~getWidgetTypeUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WidgetType}
     */
    this.getWidgetTypeUsingGET = function(isSystem, bundleAlias, alias, callback) {
      var postBody = null;

      // verify the required parameter 'isSystem' is set
      if (isSystem === undefined || isSystem === null) {
        throw new Error("Missing the required parameter 'isSystem' when calling getWidgetTypeUsingGET");
      }

      // verify the required parameter 'bundleAlias' is set
      if (bundleAlias === undefined || bundleAlias === null) {
        throw new Error("Missing the required parameter 'bundleAlias' when calling getWidgetTypeUsingGET");
      }

      // verify the required parameter 'alias' is set
      if (alias === undefined || alias === null) {
        throw new Error("Missing the required parameter 'alias' when calling getWidgetTypeUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'isSystem': isSystem,
        'bundleAlias': bundleAlias,
        'alias': alias,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = WidgetType;

      return this.apiClient.callApi(
        '/api/widgetType{?isSystem,bundleAlias,alias}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveWidgetTypeUsingPOST operation.
     * @callback module:api/WidgetTypeControllerApi~saveWidgetTypeUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WidgetType} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * saveWidgetType
     * @param {module:model/WidgetType} widgetType widgetType
     * @param {module:api/WidgetTypeControllerApi~saveWidgetTypeUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WidgetType}
     */
    this.saveWidgetTypeUsingPOST = function(widgetType, callback) {
      var postBody = widgetType;

      // verify the required parameter 'widgetType' is set
      if (widgetType === undefined || widgetType === null) {
        throw new Error("Missing the required parameter 'widgetType' when calling saveWidgetTypeUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = WidgetType;

      return this.apiClient.callApi(
        '/api/widgetType', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
