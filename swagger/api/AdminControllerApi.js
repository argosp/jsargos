/**
 * Thingsboard REST API
 * For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.
 *
 * OpenAPI spec version: 2.0
 * Contact: info@thingsboard.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/AdminSettings', 'model/UpdateMessage'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/AdminSettings'), require('../model/UpdateMessage'));
  } else {
    // Browser globals (root is window)
    if (!root.ThingsboardRestApi) {
      root.ThingsboardRestApi = {};
    }
    root.ThingsboardRestApi.AdminControllerApi = factory(root.ThingsboardRestApi.ApiClient, root.ThingsboardRestApi.AdminSettings, root.ThingsboardRestApi.UpdateMessage);
  }
}(this, function(ApiClient, AdminSettings, UpdateMessage) {
  'use strict';

  /**
   * AdminController service.
   * @module api/AdminControllerApi
   * @version 2.0
   */

  /**
   * Constructs a new AdminControllerApi. 
   * @alias module:api/AdminControllerApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the checkUpdatesUsingGET operation.
     * @callback module:api/AdminControllerApi~checkUpdatesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/UpdateMessage} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * checkUpdates
     * @param {module:api/AdminControllerApi~checkUpdatesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/UpdateMessage}
     */
    this.checkUpdatesUsingGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = UpdateMessage;

      return this.apiClient.callApi(
        '/api/admin/updates', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAdminSettingsUsingGET operation.
     * @callback module:api/AdminControllerApi~getAdminSettingsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAdminSettings
     * @param {String} key key
     * @param {module:api/AdminControllerApi~getAdminSettingsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminSettings}
     */
    this.getAdminSettingsUsingGET = function(key, callback) {
      var postBody = null;

      // verify the required parameter 'key' is set
      if (key === undefined || key === null) {
        throw new Error("Missing the required parameter 'key' when calling getAdminSettingsUsingGET");
      }


      var pathParams = {
        'key': key
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = AdminSettings;

      return this.apiClient.callApi(
        '/api/admin/settings/{key}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveAdminSettingsUsingPOST operation.
     * @callback module:api/AdminControllerApi~saveAdminSettingsUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AdminSettings} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * saveAdminSettings
     * @param {module:model/AdminSettings} adminSettings adminSettings
     * @param {module:api/AdminControllerApi~saveAdminSettingsUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AdminSettings}
     */
    this.saveAdminSettingsUsingPOST = function(adminSettings, callback) {
      var postBody = adminSettings;

      // verify the required parameter 'adminSettings' is set
      if (adminSettings === undefined || adminSettings === null) {
        throw new Error("Missing the required parameter 'adminSettings' when calling saveAdminSettingsUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = AdminSettings;

      return this.apiClient.callApi(
        '/api/admin/settings', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the sendTestMailUsingPOST operation.
     * @callback module:api/AdminControllerApi~sendTestMailUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * sendTestMail
     * @param {module:model/AdminSettings} adminSettings adminSettings
     * @param {module:api/AdminControllerApi~sendTestMailUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.sendTestMailUsingPOST = function(adminSettings, callback) {
      var postBody = adminSettings;

      // verify the required parameter 'adminSettings' is set
      if (adminSettings === undefined || adminSettings === null) {
        throw new Error("Missing the required parameter 'adminSettings' when calling sendTestMailUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/admin/settings/testMail', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
