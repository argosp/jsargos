/**
 * Thingsboard REST API
 * For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.
 *
 * OpenAPI spec version: 2.0
 * Contact: info@thingsboard.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Customer', 'model/TextPageDataCustomer'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Customer'), require('../model/TextPageDataCustomer'));
  } else {
    // Browser globals (root is window)
    if (!root.ThingsboardRestApi) {
      root.ThingsboardRestApi = {};
    }
    root.ThingsboardRestApi.CustomerControllerApi = factory(root.ThingsboardRestApi.ApiClient, root.ThingsboardRestApi.Customer, root.ThingsboardRestApi.TextPageDataCustomer);
  }
}(this, function(ApiClient, Customer, TextPageDataCustomer) {
  'use strict';

  /**
   * CustomerController service.
   * @module api/CustomerControllerApi
   * @version 2.0
   */

  /**
   * Constructs a new CustomerControllerApi. 
   * @alias module:api/CustomerControllerApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteCustomerUsingDELETE operation.
     * @callback module:api/CustomerControllerApi~deleteCustomerUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteCustomer
     * @param {String} customerId customerId
     * @param {module:api/CustomerControllerApi~deleteCustomerUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteCustomerUsingDELETE = function(customerId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling deleteCustomerUsingDELETE");
      }


      var pathParams = {
        'customerId': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/customer/{customerId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomerByIdUsingGET operation.
     * @callback module:api/CustomerControllerApi~getCustomerByIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Customer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getCustomerById
     * @param {String} customerId customerId
     * @param {module:api/CustomerControllerApi~getCustomerByIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Customer}
     */
    this.getCustomerByIdUsingGET = function(customerId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerByIdUsingGET");
      }


      var pathParams = {
        'customerId': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Customer;

      return this.apiClient.callApi(
        '/api/customer/{customerId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomerTitleByIdUsingGET operation.
     * @callback module:api/CustomerControllerApi~getCustomerTitleByIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getCustomerTitleById
     * @param {String} customerId customerId
     * @param {module:api/CustomerControllerApi~getCustomerTitleByIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.getCustomerTitleByIdUsingGET = function(customerId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerTitleByIdUsingGET");
      }


      var pathParams = {
        'customerId': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['application/text'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/customer/{customerId}/title', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomersUsingGET operation.
     * @callback module:api/CustomerControllerApi~getCustomersUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TextPageDataCustomer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getCustomers
     * @param {String} limit limit
     * @param {Object} opts Optional parameters
     * @param {String} opts.textSearch textSearch
     * @param {String} opts.idOffset idOffset
     * @param {String} opts.textOffset textOffset
     * @param {module:api/CustomerControllerApi~getCustomersUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TextPageDataCustomer}
     */
    this.getCustomersUsingGET = function(limit, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling getCustomersUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'textSearch': opts['textSearch'],
        'idOffset': opts['idOffset'],
        'textOffset': opts['textOffset'],
        'limit': limit,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = TextPageDataCustomer;

      return this.apiClient.callApi(
        '/api/customers{?textSearch,idOffset,textOffset,limit}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getShortCustomerInfoByIdUsingGET operation.
     * @callback module:api/CustomerControllerApi~getShortCustomerInfoByIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getShortCustomerInfoById
     * @param {String} customerId customerId
     * @param {module:api/CustomerControllerApi~getShortCustomerInfoByIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.getShortCustomerInfoByIdUsingGET = function(customerId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getShortCustomerInfoByIdUsingGET");
      }


      var pathParams = {
        'customerId': customerId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/customer/{customerId}/shortInfo', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTenantCustomerUsingGET operation.
     * @callback module:api/CustomerControllerApi~getTenantCustomerUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Customer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getTenantCustomer
     * @param {String} customerTitle customerTitle
     * @param {module:api/CustomerControllerApi~getTenantCustomerUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Customer}
     */
    this.getTenantCustomerUsingGET = function(customerTitle, callback) {
      var postBody = null;

      // verify the required parameter 'customerTitle' is set
      if (customerTitle === undefined || customerTitle === null) {
        throw new Error("Missing the required parameter 'customerTitle' when calling getTenantCustomerUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'customerTitle': customerTitle,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Customer;

      return this.apiClient.callApi(
        '/api/tenant/customers{?customerTitle}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveCustomerUsingPOST operation.
     * @callback module:api/CustomerControllerApi~saveCustomerUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Customer} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * saveCustomer
     * @param {module:model/Customer} customer customer
     * @param {module:api/CustomerControllerApi~saveCustomerUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Customer}
     */
    this.saveCustomerUsingPOST = function(customer, callback) {
      var postBody = customer;

      // verify the required parameter 'customer' is set
      if (customer === undefined || customer === null) {
        throw new Error("Missing the required parameter 'customer' when calling saveCustomerUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Customer;

      return this.apiClient.callApi(
        '/api/customer', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
