/**
 * Thingsboard REST API
 * For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.
 *
 * OpenAPI spec version: 2.0
 * Contact: info@thingsboard.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Asset', 'model/AssetSearchQuery', 'model/EntitySubtype', 'model/TextPageDataAsset'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Asset'), require('../model/AssetSearchQuery'), require('../model/EntitySubtype'), require('../model/TextPageDataAsset'));
  } else {
    // Browser globals (root is window)
    if (!root.ThingsboardRestApi) {
      root.ThingsboardRestApi = {};
    }
    root.ThingsboardRestApi.AssetControllerApi = factory(root.ThingsboardRestApi.ApiClient, root.ThingsboardRestApi.Asset, root.ThingsboardRestApi.AssetSearchQuery, root.ThingsboardRestApi.EntitySubtype, root.ThingsboardRestApi.TextPageDataAsset);
  }
}(this, function(ApiClient, Asset, AssetSearchQuery, EntitySubtype, TextPageDataAsset) {
  'use strict';

  /**
   * AssetController service.
   * @module api/AssetControllerApi
   * @version 2.0
   */

  /**
   * Constructs a new AssetControllerApi. 
   * @alias module:api/AssetControllerApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the assignAssetToCustomerUsingPOST operation.
     * @callback module:api/AssetControllerApi~assignAssetToCustomerUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Asset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * assignAssetToCustomer
     * @param {String} customerId customerId
     * @param {String} assetId assetId
     * @param {module:api/AssetControllerApi~assignAssetToCustomerUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Asset}
     */
    this.assignAssetToCustomerUsingPOST = function(customerId, assetId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling assignAssetToCustomerUsingPOST");
      }

      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling assignAssetToCustomerUsingPOST");
      }


      var pathParams = {
        'customerId': customerId,
        'assetId': assetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Asset;

      return this.apiClient.callApi(
        '/api/customer/{customerId}/asset/{assetId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the assignAssetToPublicCustomerUsingPOST operation.
     * @callback module:api/AssetControllerApi~assignAssetToPublicCustomerUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Asset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * assignAssetToPublicCustomer
     * @param {String} assetId assetId
     * @param {module:api/AssetControllerApi~assignAssetToPublicCustomerUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Asset}
     */
    this.assignAssetToPublicCustomerUsingPOST = function(assetId, callback) {
      var postBody = null;

      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling assignAssetToPublicCustomerUsingPOST");
      }


      var pathParams = {
        'assetId': assetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Asset;

      return this.apiClient.callApi(
        '/api/customer/public/asset/{assetId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAssetUsingDELETE operation.
     * @callback module:api/AssetControllerApi~deleteAssetUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteAsset
     * @param {String} assetId assetId
     * @param {module:api/AssetControllerApi~deleteAssetUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteAssetUsingDELETE = function(assetId, callback) {
      var postBody = null;

      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling deleteAssetUsingDELETE");
      }


      var pathParams = {
        'assetId': assetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/asset/{assetId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findByQueryUsingPOST operation.
     * @callback module:api/AssetControllerApi~findByQueryUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Asset>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * findByQuery
     * @param {module:model/AssetSearchQuery} query query
     * @param {module:api/AssetControllerApi~findByQueryUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Asset>}
     */
    this.findByQueryUsingPOST = function(query, callback) {
      var postBody = query;

      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling findByQueryUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [Asset];

      return this.apiClient.callApi(
        '/api/assets', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAssetByIdUsingGET operation.
     * @callback module:api/AssetControllerApi~getAssetByIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Asset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAssetById
     * @param {String} assetId assetId
     * @param {module:api/AssetControllerApi~getAssetByIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Asset}
     */
    this.getAssetByIdUsingGET = function(assetId, callback) {
      var postBody = null;

      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling getAssetByIdUsingGET");
      }


      var pathParams = {
        'assetId': assetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Asset;

      return this.apiClient.callApi(
        '/api/asset/{assetId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAssetTypesUsingGET operation.
     * @callback module:api/AssetControllerApi~getAssetTypesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EntitySubtype>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAssetTypes
     * @param {module:api/AssetControllerApi~getAssetTypesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EntitySubtype>}
     */
    this.getAssetTypesUsingGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [EntitySubtype];

      return this.apiClient.callApi(
        '/api/asset/types', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAssetsByIdsUsingGET operation.
     * @callback module:api/AssetControllerApi~getAssetsByIdsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Asset>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAssetsByIds
     * @param {String} assetIds assetIds
     * @param {module:api/AssetControllerApi~getAssetsByIdsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Asset>}
     */
    this.getAssetsByIdsUsingGET = function(assetIds, callback) {
      var postBody = null;

      // verify the required parameter 'assetIds' is set
      if (assetIds === undefined || assetIds === null) {
        throw new Error("Missing the required parameter 'assetIds' when calling getAssetsByIdsUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'assetIds': assetIds,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [Asset];

      return this.apiClient.callApi(
        '/api/assets{?assetIds}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomerAssetsUsingGET operation.
     * @callback module:api/AssetControllerApi~getCustomerAssetsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TextPageDataAsset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getCustomerAssets
     * @param {String} customerId customerId
     * @param {String} limit limit
     * @param {Object} opts Optional parameters
     * @param {String} opts.type type
     * @param {String} opts.textSearch textSearch
     * @param {String} opts.idOffset idOffset
     * @param {String} opts.textOffset textOffset
     * @param {module:api/AssetControllerApi~getCustomerAssetsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TextPageDataAsset}
     */
    this.getCustomerAssetsUsingGET = function(customerId, limit, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerAssetsUsingGET");
      }

      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling getCustomerAssetsUsingGET");
      }


      var pathParams = {
        'customerId': customerId
      };
      var queryParams = {
        'type': opts['type'],
        'textSearch': opts['textSearch'],
        'idOffset': opts['idOffset'],
        'textOffset': opts['textOffset'],
        'limit': limit,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = TextPageDataAsset;

      return this.apiClient.callApi(
        '/api/customer/{customerId}/assets{?type,textSearch,idOffset,textOffset,limit}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTenantAssetUsingGET operation.
     * @callback module:api/AssetControllerApi~getTenantAssetUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Asset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getTenantAsset
     * @param {String} assetName assetName
     * @param {module:api/AssetControllerApi~getTenantAssetUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Asset}
     */
    this.getTenantAssetUsingGET = function(assetName, callback) {
      var postBody = null;

      // verify the required parameter 'assetName' is set
      if (assetName === undefined || assetName === null) {
        throw new Error("Missing the required parameter 'assetName' when calling getTenantAssetUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'assetName': assetName,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Asset;

      return this.apiClient.callApi(
        '/api/tenant/assets{?assetName}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTenantAssetsUsingGET operation.
     * @callback module:api/AssetControllerApi~getTenantAssetsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TextPageDataAsset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getTenantAssets
     * @param {String} limit limit
     * @param {Object} opts Optional parameters
     * @param {String} opts.type type
     * @param {String} opts.textSearch textSearch
     * @param {String} opts.idOffset idOffset
     * @param {String} opts.textOffset textOffset
     * @param {module:api/AssetControllerApi~getTenantAssetsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TextPageDataAsset}
     */
    this.getTenantAssetsUsingGET = function(limit, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling getTenantAssetsUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'type': opts['type'],
        'textSearch': opts['textSearch'],
        'idOffset': opts['idOffset'],
        'textOffset': opts['textOffset'],
        'limit': limit,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = TextPageDataAsset;

      return this.apiClient.callApi(
        '/api/tenant/assets{?type,textSearch,idOffset,textOffset,limit}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveAssetUsingPOST operation.
     * @callback module:api/AssetControllerApi~saveAssetUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Asset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * saveAsset
     * @param {module:model/Asset} asset asset
     * @param {module:api/AssetControllerApi~saveAssetUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Asset}
     */
    this.saveAssetUsingPOST = function(asset, callback) {
      var postBody = asset;

      // verify the required parameter 'asset' is set
      if (asset === undefined || asset === null) {
        throw new Error("Missing the required parameter 'asset' when calling saveAssetUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Asset;

      return this.apiClient.callApi(
        '/api/asset', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the unassignAssetFromCustomerUsingDELETE operation.
     * @callback module:api/AssetControllerApi~unassignAssetFromCustomerUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param {module:model/Asset} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * unassignAssetFromCustomer
     * @param {String} assetId assetId
     * @param {module:api/AssetControllerApi~unassignAssetFromCustomerUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Asset}
     */
    this.unassignAssetFromCustomerUsingDELETE = function(assetId, callback) {
      var postBody = null;

      // verify the required parameter 'assetId' is set
      if (assetId === undefined || assetId === null) {
        throw new Error("Missing the required parameter 'assetId' when calling unassignAssetFromCustomerUsingDELETE");
      }


      var pathParams = {
        'assetId': assetId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Asset;

      return this.apiClient.callApi(
        '/api/customer/asset/{assetId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
