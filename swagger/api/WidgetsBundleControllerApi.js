/**
 * Thingsboard REST API
 * For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.
 *
 * OpenAPI spec version: 2.0
 * Contact: info@thingsboard.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/TextPageDataWidgetsBundle', 'model/WidgetsBundle'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/TextPageDataWidgetsBundle'), require('../model/WidgetsBundle'));
  } else {
    // Browser globals (root is window)
    if (!root.ThingsboardRestApi) {
      root.ThingsboardRestApi = {};
    }
    root.ThingsboardRestApi.WidgetsBundleControllerApi = factory(root.ThingsboardRestApi.ApiClient, root.ThingsboardRestApi.TextPageDataWidgetsBundle, root.ThingsboardRestApi.WidgetsBundle);
  }
}(this, function(ApiClient, TextPageDataWidgetsBundle, WidgetsBundle) {
  'use strict';

  /**
   * WidgetsBundleController service.
   * @module api/WidgetsBundleControllerApi
   * @version 2.0
   */

  /**
   * Constructs a new WidgetsBundleControllerApi. 
   * @alias module:api/WidgetsBundleControllerApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteWidgetsBundleUsingDELETE operation.
     * @callback module:api/WidgetsBundleControllerApi~deleteWidgetsBundleUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteWidgetsBundle
     * @param {String} widgetsBundleId widgetsBundleId
     * @param {module:api/WidgetsBundleControllerApi~deleteWidgetsBundleUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteWidgetsBundleUsingDELETE = function(widgetsBundleId, callback) {
      var postBody = null;

      // verify the required parameter 'widgetsBundleId' is set
      if (widgetsBundleId === undefined || widgetsBundleId === null) {
        throw new Error("Missing the required parameter 'widgetsBundleId' when calling deleteWidgetsBundleUsingDELETE");
      }


      var pathParams = {
        'widgetsBundleId': widgetsBundleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/widgetsBundle/{widgetsBundleId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWidgetsBundleByIdUsingGET operation.
     * @callback module:api/WidgetsBundleControllerApi~getWidgetsBundleByIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WidgetsBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getWidgetsBundleById
     * @param {String} widgetsBundleId widgetsBundleId
     * @param {module:api/WidgetsBundleControllerApi~getWidgetsBundleByIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WidgetsBundle}
     */
    this.getWidgetsBundleByIdUsingGET = function(widgetsBundleId, callback) {
      var postBody = null;

      // verify the required parameter 'widgetsBundleId' is set
      if (widgetsBundleId === undefined || widgetsBundleId === null) {
        throw new Error("Missing the required parameter 'widgetsBundleId' when calling getWidgetsBundleByIdUsingGET");
      }


      var pathParams = {
        'widgetsBundleId': widgetsBundleId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = WidgetsBundle;

      return this.apiClient.callApi(
        '/api/widgetsBundle/{widgetsBundleId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWidgetsBundlesUsingGET operation.
     * @callback module:api/WidgetsBundleControllerApi~getWidgetsBundlesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TextPageDataWidgetsBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getWidgetsBundles
     * @param {String} limit limit
     * @param {Object} opts Optional parameters
     * @param {String} opts.textSearch textSearch
     * @param {String} opts.idOffset idOffset
     * @param {String} opts.textOffset textOffset
     * @param {module:api/WidgetsBundleControllerApi~getWidgetsBundlesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TextPageDataWidgetsBundle}
     */
    this.getWidgetsBundlesUsingGET = function(limit, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling getWidgetsBundlesUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'textSearch': opts['textSearch'],
        'idOffset': opts['idOffset'],
        'textOffset': opts['textOffset'],
        'limit': limit,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = TextPageDataWidgetsBundle;

      return this.apiClient.callApi(
        '/api/widgetsBundles{?textSearch,idOffset,textOffset,limit}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getWidgetsBundlesUsingGET1 operation.
     * @callback module:api/WidgetsBundleControllerApi~getWidgetsBundlesUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/WidgetsBundle>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getWidgetsBundles
     * @param {module:api/WidgetsBundleControllerApi~getWidgetsBundlesUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/WidgetsBundle>}
     */
    this.getWidgetsBundlesUsingGET1 = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [WidgetsBundle];

      return this.apiClient.callApi(
        '/api/widgetsBundles', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveWidgetsBundleUsingPOST operation.
     * @callback module:api/WidgetsBundleControllerApi~saveWidgetsBundleUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/WidgetsBundle} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * saveWidgetsBundle
     * @param {module:model/WidgetsBundle} widgetsBundle widgetsBundle
     * @param {module:api/WidgetsBundleControllerApi~saveWidgetsBundleUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/WidgetsBundle}
     */
    this.saveWidgetsBundleUsingPOST = function(widgetsBundle, callback) {
      var postBody = widgetsBundle;

      // verify the required parameter 'widgetsBundle' is set
      if (widgetsBundle === undefined || widgetsBundle === null) {
        throw new Error("Missing the required parameter 'widgetsBundle' when calling saveWidgetsBundleUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = WidgetsBundle;

      return this.apiClient.callApi(
        '/api/widgetsBundle', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
