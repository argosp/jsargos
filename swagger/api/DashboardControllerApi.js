/**
 * Thingsboard REST API
 * For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.
 *
 * OpenAPI spec version: 2.0
 * Contact: info@thingsboard.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Dashboard', 'model/DashboardInfo', 'model/TextPageDataDashboardInfo', 'model/TimePageDataDashboardInfo'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Dashboard'), require('../model/DashboardInfo'), require('../model/TextPageDataDashboardInfo'), require('../model/TimePageDataDashboardInfo'));
  } else {
    // Browser globals (root is window)
    if (!root.ThingsboardRestApi) {
      root.ThingsboardRestApi = {};
    }
    root.ThingsboardRestApi.DashboardControllerApi = factory(root.ThingsboardRestApi.ApiClient, root.ThingsboardRestApi.Dashboard, root.ThingsboardRestApi.DashboardInfo, root.ThingsboardRestApi.TextPageDataDashboardInfo, root.ThingsboardRestApi.TimePageDataDashboardInfo);
  }
}(this, function(ApiClient, Dashboard, DashboardInfo, TextPageDataDashboardInfo, TimePageDataDashboardInfo) {
  'use strict';

  /**
   * DashboardController service.
   * @module api/DashboardControllerApi
   * @version 2.0
   */

  /**
   * Constructs a new DashboardControllerApi. 
   * @alias module:api/DashboardControllerApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the addDashboardCustomersUsingPOST operation.
     * @callback module:api/DashboardControllerApi~addDashboardCustomersUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dashboard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * addDashboardCustomers
     * @param {String} dashboardId dashboardId
     * @param {Array.<module:model/String>} strCustomerIds strCustomerIds
     * @param {module:api/DashboardControllerApi~addDashboardCustomersUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dashboard}
     */
    this.addDashboardCustomersUsingPOST = function(dashboardId, strCustomerIds, callback) {
      var postBody = strCustomerIds;

      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling addDashboardCustomersUsingPOST");
      }

      // verify the required parameter 'strCustomerIds' is set
      if (strCustomerIds === undefined || strCustomerIds === null) {
        throw new Error("Missing the required parameter 'strCustomerIds' when calling addDashboardCustomersUsingPOST");
      }


      var pathParams = {
        'dashboardId': dashboardId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Dashboard;

      return this.apiClient.callApi(
        '/api/dashboard/{dashboardId}/customers/add', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the assignDashboardToCustomerUsingPOST operation.
     * @callback module:api/DashboardControllerApi~assignDashboardToCustomerUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dashboard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * assignDashboardToCustomer
     * @param {String} customerId customerId
     * @param {String} dashboardId dashboardId
     * @param {module:api/DashboardControllerApi~assignDashboardToCustomerUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dashboard}
     */
    this.assignDashboardToCustomerUsingPOST = function(customerId, dashboardId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling assignDashboardToCustomerUsingPOST");
      }

      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling assignDashboardToCustomerUsingPOST");
      }


      var pathParams = {
        'customerId': customerId,
        'dashboardId': dashboardId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Dashboard;

      return this.apiClient.callApi(
        '/api/customer/{customerId}/dashboard/{dashboardId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the assignDashboardToPublicCustomerUsingPOST operation.
     * @callback module:api/DashboardControllerApi~assignDashboardToPublicCustomerUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dashboard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * assignDashboardToPublicCustomer
     * @param {String} dashboardId dashboardId
     * @param {module:api/DashboardControllerApi~assignDashboardToPublicCustomerUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dashboard}
     */
    this.assignDashboardToPublicCustomerUsingPOST = function(dashboardId, callback) {
      var postBody = null;

      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling assignDashboardToPublicCustomerUsingPOST");
      }


      var pathParams = {
        'dashboardId': dashboardId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Dashboard;

      return this.apiClient.callApi(
        '/api/customer/public/dashboard/{dashboardId}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteDashboardUsingDELETE operation.
     * @callback module:api/DashboardControllerApi~deleteDashboardUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteDashboard
     * @param {String} dashboardId dashboardId
     * @param {module:api/DashboardControllerApi~deleteDashboardUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteDashboardUsingDELETE = function(dashboardId, callback) {
      var postBody = null;

      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling deleteDashboardUsingDELETE");
      }


      var pathParams = {
        'dashboardId': dashboardId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/dashboard/{dashboardId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getCustomerDashboardsUsingGET operation.
     * @callback module:api/DashboardControllerApi~getCustomerDashboardsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TimePageDataDashboardInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getCustomerDashboards
     * @param {String} customerId customerId
     * @param {String} limit limit
     * @param {Object} opts Optional parameters
     * @param {Number} opts.startTime startTime
     * @param {Number} opts.endTime endTime
     * @param {Boolean} opts.ascOrder ascOrder (default to false)
     * @param {String} opts.offset offset
     * @param {module:api/DashboardControllerApi~getCustomerDashboardsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TimePageDataDashboardInfo}
     */
    this.getCustomerDashboardsUsingGET = function(customerId, limit, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling getCustomerDashboardsUsingGET");
      }

      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling getCustomerDashboardsUsingGET");
      }


      var pathParams = {
        'customerId': customerId
      };
      var queryParams = {
        'startTime': opts['startTime'],
        'endTime': opts['endTime'],
        'ascOrder': opts['ascOrder'],
        'offset': opts['offset'],
        'limit': limit,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = TimePageDataDashboardInfo;

      return this.apiClient.callApi(
        '/api/customer/{customerId}/dashboards{?startTime,endTime,ascOrder,offset,limit}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDashboardByIdUsingGET operation.
     * @callback module:api/DashboardControllerApi~getDashboardByIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dashboard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getDashboardById
     * @param {String} dashboardId dashboardId
     * @param {module:api/DashboardControllerApi~getDashboardByIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dashboard}
     */
    this.getDashboardByIdUsingGET = function(dashboardId, callback) {
      var postBody = null;

      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling getDashboardByIdUsingGET");
      }


      var pathParams = {
        'dashboardId': dashboardId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Dashboard;

      return this.apiClient.callApi(
        '/api/dashboard/{dashboardId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getDashboardInfoByIdUsingGET operation.
     * @callback module:api/DashboardControllerApi~getDashboardInfoByIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DashboardInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getDashboardInfoById
     * @param {String} dashboardId dashboardId
     * @param {module:api/DashboardControllerApi~getDashboardInfoByIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DashboardInfo}
     */
    this.getDashboardInfoByIdUsingGET = function(dashboardId, callback) {
      var postBody = null;

      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling getDashboardInfoByIdUsingGET");
      }


      var pathParams = {
        'dashboardId': dashboardId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = DashboardInfo;

      return this.apiClient.callApi(
        '/api/dashboard/info/{dashboardId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getMaxDatapointsLimitUsingGET operation.
     * @callback module:api/DashboardControllerApi~getMaxDatapointsLimitUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getMaxDatapointsLimit
     * @param {module:api/DashboardControllerApi~getMaxDatapointsLimitUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    this.getMaxDatapointsLimitUsingGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/api/dashboard/maxDatapointsLimit', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getServerTimeUsingGET operation.
     * @callback module:api/DashboardControllerApi~getServerTimeUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {'Number'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getServerTime
     * @param {module:api/DashboardControllerApi~getServerTimeUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'Number'}
     */
    this.getServerTimeUsingGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = 'Number';

      return this.apiClient.callApi(
        '/api/dashboard/serverTime', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTenantDashboardsUsingGET operation.
     * @callback module:api/DashboardControllerApi~getTenantDashboardsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TextPageDataDashboardInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getTenantDashboards
     * @param {String} limit limit
     * @param {Object} opts Optional parameters
     * @param {String} opts.textSearch textSearch
     * @param {String} opts.idOffset idOffset
     * @param {String} opts.textOffset textOffset
     * @param {module:api/DashboardControllerApi~getTenantDashboardsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TextPageDataDashboardInfo}
     */
    this.getTenantDashboardsUsingGET = function(limit, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling getTenantDashboardsUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'textSearch': opts['textSearch'],
        'idOffset': opts['idOffset'],
        'textOffset': opts['textOffset'],
        'limit': limit,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = TextPageDataDashboardInfo;

      return this.apiClient.callApi(
        '/api/tenant/dashboards{?textSearch,idOffset,textOffset,limit}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTenantDashboardsUsingGET1 operation.
     * @callback module:api/DashboardControllerApi~getTenantDashboardsUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/TextPageDataDashboardInfo} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getTenantDashboards
     * @param {String} tenantId tenantId
     * @param {String} limit limit
     * @param {Object} opts Optional parameters
     * @param {String} opts.textSearch textSearch
     * @param {String} opts.idOffset idOffset
     * @param {String} opts.textOffset textOffset
     * @param {module:api/DashboardControllerApi~getTenantDashboardsUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TextPageDataDashboardInfo}
     */
    this.getTenantDashboardsUsingGET1 = function(tenantId, limit, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'tenantId' is set
      if (tenantId === undefined || tenantId === null) {
        throw new Error("Missing the required parameter 'tenantId' when calling getTenantDashboardsUsingGET1");
      }

      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling getTenantDashboardsUsingGET1");
      }


      var pathParams = {
        'tenantId': tenantId
      };
      var queryParams = {
        'textSearch': opts['textSearch'],
        'idOffset': opts['idOffset'],
        'textOffset': opts['textOffset'],
        'limit': limit,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = TextPageDataDashboardInfo;

      return this.apiClient.callApi(
        '/api/tenant/{tenantId}/dashboards{?textSearch,idOffset,textOffset,limit}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the removeDashboardCustomersUsingPOST operation.
     * @callback module:api/DashboardControllerApi~removeDashboardCustomersUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dashboard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * removeDashboardCustomers
     * @param {String} dashboardId dashboardId
     * @param {Array.<module:model/String>} strCustomerIds strCustomerIds
     * @param {module:api/DashboardControllerApi~removeDashboardCustomersUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dashboard}
     */
    this.removeDashboardCustomersUsingPOST = function(dashboardId, strCustomerIds, callback) {
      var postBody = strCustomerIds;

      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling removeDashboardCustomersUsingPOST");
      }

      // verify the required parameter 'strCustomerIds' is set
      if (strCustomerIds === undefined || strCustomerIds === null) {
        throw new Error("Missing the required parameter 'strCustomerIds' when calling removeDashboardCustomersUsingPOST");
      }


      var pathParams = {
        'dashboardId': dashboardId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Dashboard;

      return this.apiClient.callApi(
        '/api/dashboard/{dashboardId}/customers/remove', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveDashboardUsingPOST operation.
     * @callback module:api/DashboardControllerApi~saveDashboardUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dashboard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * saveDashboard
     * @param {module:model/Dashboard} dashboard dashboard
     * @param {module:api/DashboardControllerApi~saveDashboardUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dashboard}
     */
    this.saveDashboardUsingPOST = function(dashboard, callback) {
      var postBody = dashboard;

      // verify the required parameter 'dashboard' is set
      if (dashboard === undefined || dashboard === null) {
        throw new Error("Missing the required parameter 'dashboard' when calling saveDashboardUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Dashboard;

      return this.apiClient.callApi(
        '/api/dashboard', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the unassignDashboardFromCustomerUsingDELETE operation.
     * @callback module:api/DashboardControllerApi~unassignDashboardFromCustomerUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dashboard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * unassignDashboardFromCustomer
     * @param {String} customerId customerId
     * @param {String} dashboardId dashboardId
     * @param {module:api/DashboardControllerApi~unassignDashboardFromCustomerUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dashboard}
     */
    this.unassignDashboardFromCustomerUsingDELETE = function(customerId, dashboardId, callback) {
      var postBody = null;

      // verify the required parameter 'customerId' is set
      if (customerId === undefined || customerId === null) {
        throw new Error("Missing the required parameter 'customerId' when calling unassignDashboardFromCustomerUsingDELETE");
      }

      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling unassignDashboardFromCustomerUsingDELETE");
      }


      var pathParams = {
        'customerId': customerId,
        'dashboardId': dashboardId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Dashboard;

      return this.apiClient.callApi(
        '/api/customer/{customerId}/dashboard/{dashboardId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the unassignDashboardFromPublicCustomerUsingDELETE operation.
     * @callback module:api/DashboardControllerApi~unassignDashboardFromPublicCustomerUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dashboard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * unassignDashboardFromPublicCustomer
     * @param {String} dashboardId dashboardId
     * @param {module:api/DashboardControllerApi~unassignDashboardFromPublicCustomerUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dashboard}
     */
    this.unassignDashboardFromPublicCustomerUsingDELETE = function(dashboardId, callback) {
      var postBody = null;

      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling unassignDashboardFromPublicCustomerUsingDELETE");
      }


      var pathParams = {
        'dashboardId': dashboardId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Dashboard;

      return this.apiClient.callApi(
        '/api/customer/public/dashboard/{dashboardId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the updateDashboardCustomersUsingPOST operation.
     * @callback module:api/DashboardControllerApi~updateDashboardCustomersUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Dashboard} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updateDashboardCustomers
     * @param {String} dashboardId dashboardId
     * @param {Array.<module:model/String>} strCustomerIds strCustomerIds
     * @param {module:api/DashboardControllerApi~updateDashboardCustomersUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/Dashboard}
     */
    this.updateDashboardCustomersUsingPOST = function(dashboardId, strCustomerIds, callback) {
      var postBody = strCustomerIds;

      // verify the required parameter 'dashboardId' is set
      if (dashboardId === undefined || dashboardId === null) {
        throw new Error("Missing the required parameter 'dashboardId' when calling updateDashboardCustomersUsingPOST");
      }

      // verify the required parameter 'strCustomerIds' is set
      if (strCustomerIds === undefined || strCustomerIds === null) {
        throw new Error("Missing the required parameter 'strCustomerIds' when calling updateDashboardCustomersUsingPOST");
      }


      var pathParams = {
        'dashboardId': dashboardId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = Dashboard;

      return this.apiClient.callApi(
        '/api/dashboard/{dashboardId}/customers', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
