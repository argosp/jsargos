/**
 * Thingsboard REST API
 * For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.
 *
 * OpenAPI spec version: 2.0
 * Contact: info@thingsboard.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/User'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/User'));
  } else {
    // Browser globals (root is window)
    if (!root.ThingsboardRestApi) {
      root.ThingsboardRestApi = {};
    }
    root.ThingsboardRestApi.AuthControllerApi = factory(root.ThingsboardRestApi.ApiClient, root.ThingsboardRestApi.User);
  }
}(this, function(ApiClient, User) {
  'use strict';

  /**
   * AuthController service.
   * @module api/AuthControllerApi
   * @version 2.0
   */

  /**
   * Constructs a new AuthControllerApi. 
   * @alias module:api/AuthControllerApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the activateUserUsingPOST operation.
     * @callback module:api/AuthControllerApi~activateUserUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * activateUser
     * @param {String} activateRequest activateRequest
     * @param {module:api/AuthControllerApi~activateUserUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.activateUserUsingPOST = function(activateRequest, callback) {
      var postBody = activateRequest;

      // verify the required parameter 'activateRequest' is set
      if (activateRequest === undefined || activateRequest === null) {
        throw new Error("Missing the required parameter 'activateRequest' when calling activateUserUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/noauth/activate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the changePasswordUsingPOST operation.
     * @callback module:api/AuthControllerApi~changePasswordUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * changePassword
     * @param {String} changePasswordRequest changePasswordRequest
     * @param {module:api/AuthControllerApi~changePasswordUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.changePasswordUsingPOST = function(changePasswordRequest, callback) {
      var postBody = changePasswordRequest;

      // verify the required parameter 'changePasswordRequest' is set
      if (changePasswordRequest === undefined || changePasswordRequest === null) {
        throw new Error("Missing the required parameter 'changePasswordRequest' when calling changePasswordUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/auth/changePassword', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the checkActivateTokenUsingGET operation.
     * @callback module:api/AuthControllerApi~checkActivateTokenUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * checkActivateToken
     * @param {String} activateToken activateToken
     * @param {module:api/AuthControllerApi~checkActivateTokenUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.checkActivateTokenUsingGET = function(activateToken, callback) {
      var postBody = null;

      // verify the required parameter 'activateToken' is set
      if (activateToken === undefined || activateToken === null) {
        throw new Error("Missing the required parameter 'activateToken' when calling checkActivateTokenUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'activateToken': activateToken,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/noauth/activate{?activateToken}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the checkResetTokenUsingGET operation.
     * @callback module:api/AuthControllerApi~checkResetTokenUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * checkResetToken
     * @param {String} resetToken resetToken
     * @param {module:api/AuthControllerApi~checkResetTokenUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.checkResetTokenUsingGET = function(resetToken, callback) {
      var postBody = null;

      // verify the required parameter 'resetToken' is set
      if (resetToken === undefined || resetToken === null) {
        throw new Error("Missing the required parameter 'resetToken' when calling checkResetTokenUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'resetToken': resetToken,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/noauth/resetPassword{?resetToken}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getUserUsingGET operation.
     * @callback module:api/AuthControllerApi~getUserUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/User} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getUser
     * @param {module:api/AuthControllerApi~getUserUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/User}
     */
    this.getUserUsingGET = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = User;

      return this.apiClient.callApi(
        '/api/auth/user', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the requestResetPasswordByEmailUsingPOST operation.
     * @callback module:api/AuthControllerApi~requestResetPasswordByEmailUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * requestResetPasswordByEmail
     * @param {String} resetPasswordByEmailRequest resetPasswordByEmailRequest
     * @param {module:api/AuthControllerApi~requestResetPasswordByEmailUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.requestResetPasswordByEmailUsingPOST = function(resetPasswordByEmailRequest, callback) {
      var postBody = resetPasswordByEmailRequest;

      // verify the required parameter 'resetPasswordByEmailRequest' is set
      if (resetPasswordByEmailRequest === undefined || resetPasswordByEmailRequest === null) {
        throw new Error("Missing the required parameter 'resetPasswordByEmailRequest' when calling requestResetPasswordByEmailUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/noauth/resetPasswordByEmail', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the resetPasswordUsingPOST operation.
     * @callback module:api/AuthControllerApi~resetPasswordUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * resetPassword
     * @param {String} resetPasswordRequest resetPasswordRequest
     * @param {module:api/AuthControllerApi~resetPasswordUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.resetPasswordUsingPOST = function(resetPasswordRequest, callback) {
      var postBody = resetPasswordRequest;

      // verify the required parameter 'resetPasswordRequest' is set
      if (resetPasswordRequest === undefined || resetPasswordRequest === null) {
        throw new Error("Missing the required parameter 'resetPasswordRequest' when calling resetPasswordUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/noauth/resetPassword', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
