/**
 * Thingsboard REST API
 * For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.
 *
 * OpenAPI spec version: 2.0
 * Contact: info@thingsboard.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DeferredResultResponseEntity'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DeferredResultResponseEntity'));
  } else {
    // Browser globals (root is window)
    if (!root.ThingsboardRestApi) {
      root.ThingsboardRestApi = {};
    }
    root.ThingsboardRestApi.TelemetryControllerApi = factory(root.ThingsboardRestApi.ApiClient, root.ThingsboardRestApi.DeferredResultResponseEntity);
  }
}(this, function(ApiClient, DeferredResultResponseEntity) {
  'use strict';

  /**
   * TelemetryController service.
   * @module api/TelemetryControllerApi
   * @version 2.0
   */

  /**
   * Constructs a new TelemetryControllerApi. 
   * @alias module:api/TelemetryControllerApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteEntityAttributesUsingDELETE operation.
     * @callback module:api/TelemetryControllerApi~deleteEntityAttributesUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeferredResultResponseEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteEntityAttributes
     * @param {String} deviceId deviceId
     * @param {String} scope scope
     * @param {String} keys keys
     * @param {module:api/TelemetryControllerApi~deleteEntityAttributesUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeferredResultResponseEntity}
     */
    this.deleteEntityAttributesUsingDELETE = function(deviceId, scope, keys, callback) {
      var postBody = null;

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling deleteEntityAttributesUsingDELETE");
      }

      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling deleteEntityAttributesUsingDELETE");
      }

      // verify the required parameter 'keys' is set
      if (keys === undefined || keys === null) {
        throw new Error("Missing the required parameter 'keys' when calling deleteEntityAttributesUsingDELETE");
      }


      var pathParams = {
        'deviceId': deviceId,
        'scope': scope
      };
      var queryParams = {
        'keys': keys,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = DeferredResultResponseEntity;

      return this.apiClient.callApi(
        '/api/plugins/telemetry/{deviceId}/{scope}{?keys}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEntityAttributesUsingDELETE1 operation.
     * @callback module:api/TelemetryControllerApi~deleteEntityAttributesUsingDELETE1Callback
     * @param {String} error Error message, if any.
     * @param {module:model/DeferredResultResponseEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteEntityAttributes
     * @param {String} entityType entityType
     * @param {String} entityId entityId
     * @param {String} scope scope
     * @param {String} keys keys
     * @param {module:api/TelemetryControllerApi~deleteEntityAttributesUsingDELETE1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeferredResultResponseEntity}
     */
    this.deleteEntityAttributesUsingDELETE1 = function(entityType, entityId, scope, keys, callback) {
      var postBody = null;

      // verify the required parameter 'entityType' is set
      if (entityType === undefined || entityType === null) {
        throw new Error("Missing the required parameter 'entityType' when calling deleteEntityAttributesUsingDELETE1");
      }

      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling deleteEntityAttributesUsingDELETE1");
      }

      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling deleteEntityAttributesUsingDELETE1");
      }

      // verify the required parameter 'keys' is set
      if (keys === undefined || keys === null) {
        throw new Error("Missing the required parameter 'keys' when calling deleteEntityAttributesUsingDELETE1");
      }


      var pathParams = {
        'entityType': entityType,
        'entityId': entityId,
        'scope': scope
      };
      var queryParams = {
        'keys': keys,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = DeferredResultResponseEntity;

      return this.apiClient.callApi(
        '/api/plugins/telemetry/{entityType}/{entityId}/{scope}{?keys}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEntityTimeseriesUsingDELETE operation.
     * @callback module:api/TelemetryControllerApi~deleteEntityTimeseriesUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeferredResultResponseEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteEntityTimeseries
     * @param {String} entityType entityType
     * @param {String} entityId entityId
     * @param {String} keys keys
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.deleteAllDataForKeys deleteAllDataForKeys (default to false)
     * @param {Number} opts.startTs startTs
     * @param {Number} opts.endTs endTs
     * @param {Boolean} opts.rewriteLatestIfDeleted rewriteLatestIfDeleted (default to false)
     * @param {module:api/TelemetryControllerApi~deleteEntityTimeseriesUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeferredResultResponseEntity}
     */
    this.deleteEntityTimeseriesUsingDELETE = function(entityType, entityId, keys, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'entityType' is set
      if (entityType === undefined || entityType === null) {
        throw new Error("Missing the required parameter 'entityType' when calling deleteEntityTimeseriesUsingDELETE");
      }

      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling deleteEntityTimeseriesUsingDELETE");
      }

      // verify the required parameter 'keys' is set
      if (keys === undefined || keys === null) {
        throw new Error("Missing the required parameter 'keys' when calling deleteEntityTimeseriesUsingDELETE");
      }


      var pathParams = {
        'entityType': entityType,
        'entityId': entityId
      };
      var queryParams = {
        'keys': keys,
        'deleteAllDataForKeys': opts['deleteAllDataForKeys'],
        'startTs': opts['startTs'],
        'endTs': opts['endTs'],
        'rewriteLatestIfDeleted': opts['rewriteLatestIfDeleted'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = DeferredResultResponseEntity;

      return this.apiClient.callApi(
        '/api/plugins/telemetry/{entityType}/{entityId}/timeseries/delete{?keys,deleteAllDataForKeys,startTs,endTs,rewriteLatestIfDeleted}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttributeKeysByScopeUsingGET operation.
     * @callback module:api/TelemetryControllerApi~getAttributeKeysByScopeUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeferredResultResponseEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAttributeKeysByScope
     * @param {String} entityType entityType
     * @param {String} entityId entityId
     * @param {String} scope scope
     * @param {module:api/TelemetryControllerApi~getAttributeKeysByScopeUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeferredResultResponseEntity}
     */
    this.getAttributeKeysByScopeUsingGET = function(entityType, entityId, scope, callback) {
      var postBody = null;

      // verify the required parameter 'entityType' is set
      if (entityType === undefined || entityType === null) {
        throw new Error("Missing the required parameter 'entityType' when calling getAttributeKeysByScopeUsingGET");
      }

      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling getAttributeKeysByScopeUsingGET");
      }

      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling getAttributeKeysByScopeUsingGET");
      }


      var pathParams = {
        'entityType': entityType,
        'entityId': entityId,
        'scope': scope
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = DeferredResultResponseEntity;

      return this.apiClient.callApi(
        '/api/plugins/telemetry/{entityType}/{entityId}/keys/attributes/{scope}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttributeKeysUsingGET operation.
     * @callback module:api/TelemetryControllerApi~getAttributeKeysUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeferredResultResponseEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAttributeKeys
     * @param {String} entityType entityType
     * @param {String} entityId entityId
     * @param {module:api/TelemetryControllerApi~getAttributeKeysUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeferredResultResponseEntity}
     */
    this.getAttributeKeysUsingGET = function(entityType, entityId, callback) {
      var postBody = null;

      // verify the required parameter 'entityType' is set
      if (entityType === undefined || entityType === null) {
        throw new Error("Missing the required parameter 'entityType' when calling getAttributeKeysUsingGET");
      }

      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling getAttributeKeysUsingGET");
      }


      var pathParams = {
        'entityType': entityType,
        'entityId': entityId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = DeferredResultResponseEntity;

      return this.apiClient.callApi(
        '/api/plugins/telemetry/{entityType}/{entityId}/keys/attributes', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttributesByScopeUsingGET operation.
     * @callback module:api/TelemetryControllerApi~getAttributesByScopeUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeferredResultResponseEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAttributesByScope
     * @param {String} entityType entityType
     * @param {String} entityId entityId
     * @param {String} scope scope
     * @param {Object} opts Optional parameters
     * @param {String} opts.keys keys
     * @param {module:api/TelemetryControllerApi~getAttributesByScopeUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeferredResultResponseEntity}
     */
    this.getAttributesByScopeUsingGET = function(entityType, entityId, scope, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'entityType' is set
      if (entityType === undefined || entityType === null) {
        throw new Error("Missing the required parameter 'entityType' when calling getAttributesByScopeUsingGET");
      }

      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling getAttributesByScopeUsingGET");
      }

      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling getAttributesByScopeUsingGET");
      }


      var pathParams = {
        'entityType': entityType,
        'entityId': entityId,
        'scope': scope
      };
      var queryParams = {
        'keys': opts['keys'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = DeferredResultResponseEntity;

      return this.apiClient.callApi(
        '/api/plugins/telemetry/{entityType}/{entityId}/values/attributes/{scope}{?keys}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAttributesUsingGET operation.
     * @callback module:api/TelemetryControllerApi~getAttributesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeferredResultResponseEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAttributes
     * @param {String} entityType entityType
     * @param {String} entityId entityId
     * @param {Object} opts Optional parameters
     * @param {String} opts.keys keys
     * @param {module:api/TelemetryControllerApi~getAttributesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeferredResultResponseEntity}
     */
    this.getAttributesUsingGET = function(entityType, entityId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'entityType' is set
      if (entityType === undefined || entityType === null) {
        throw new Error("Missing the required parameter 'entityType' when calling getAttributesUsingGET");
      }

      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling getAttributesUsingGET");
      }


      var pathParams = {
        'entityType': entityType,
        'entityId': entityId
      };
      var queryParams = {
        'keys': opts['keys'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = DeferredResultResponseEntity;

      return this.apiClient.callApi(
        '/api/plugins/telemetry/{entityType}/{entityId}/values/attributes{?keys}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLatestTimeseriesUsingGET operation.
     * @callback module:api/TelemetryControllerApi~getLatestTimeseriesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeferredResultResponseEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getLatestTimeseries
     * @param {String} entityType entityType
     * @param {String} entityId entityId
     * @param {Object} opts Optional parameters
     * @param {String} opts.keys keys
     * @param {module:api/TelemetryControllerApi~getLatestTimeseriesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeferredResultResponseEntity}
     */
    this.getLatestTimeseriesUsingGET = function(entityType, entityId, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'entityType' is set
      if (entityType === undefined || entityType === null) {
        throw new Error("Missing the required parameter 'entityType' when calling getLatestTimeseriesUsingGET");
      }

      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling getLatestTimeseriesUsingGET");
      }


      var pathParams = {
        'entityType': entityType,
        'entityId': entityId
      };
      var queryParams = {
        'keys': opts['keys'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = DeferredResultResponseEntity;

      return this.apiClient.callApi(
        '/api/plugins/telemetry/{entityType}/{entityId}/values/timeseries{?keys}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTimeseriesKeysUsingGET operation.
     * @callback module:api/TelemetryControllerApi~getTimeseriesKeysUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeferredResultResponseEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getTimeseriesKeys
     * @param {String} entityType entityType
     * @param {String} entityId entityId
     * @param {module:api/TelemetryControllerApi~getTimeseriesKeysUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeferredResultResponseEntity}
     */
    this.getTimeseriesKeysUsingGET = function(entityType, entityId, callback) {
      var postBody = null;

      // verify the required parameter 'entityType' is set
      if (entityType === undefined || entityType === null) {
        throw new Error("Missing the required parameter 'entityType' when calling getTimeseriesKeysUsingGET");
      }

      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling getTimeseriesKeysUsingGET");
      }


      var pathParams = {
        'entityType': entityType,
        'entityId': entityId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = DeferredResultResponseEntity;

      return this.apiClient.callApi(
        '/api/plugins/telemetry/{entityType}/{entityId}/keys/timeseries', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getTimeseriesUsingGET operation.
     * @callback module:api/TelemetryControllerApi~getTimeseriesUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeferredResultResponseEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getTimeseries
     * @param {String} entityType entityType
     * @param {String} entityId entityId
     * @param {String} keys keys
     * @param {String} startTs startTs
     * @param {String} endTs endTs
     * @param {Object} opts Optional parameters
     * @param {Number} opts.interval interval (default to 0)
     * @param {Number} opts.limit limit (default to 100)
     * @param {String} opts.agg agg (default to NONE)
     * @param {module:api/TelemetryControllerApi~getTimeseriesUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeferredResultResponseEntity}
     */
    this.getTimeseriesUsingGET = function(entityType, entityId, keys, startTs, endTs, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'entityType' is set
      if (entityType === undefined || entityType === null) {
        throw new Error("Missing the required parameter 'entityType' when calling getTimeseriesUsingGET");
      }

      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling getTimeseriesUsingGET");
      }

      // verify the required parameter 'keys' is set
      if (keys === undefined || keys === null) {
        throw new Error("Missing the required parameter 'keys' when calling getTimeseriesUsingGET");
      }

      // verify the required parameter 'startTs' is set
      if (startTs === undefined || startTs === null) {
        throw new Error("Missing the required parameter 'startTs' when calling getTimeseriesUsingGET");
      }

      // verify the required parameter 'endTs' is set
      if (endTs === undefined || endTs === null) {
        throw new Error("Missing the required parameter 'endTs' when calling getTimeseriesUsingGET");
      }


      var pathParams = {
        'entityType': entityType,
        'entityId': entityId
      };
      var queryParams = {
        'interval': opts['interval'],
        'limit': opts['limit'],
        'agg': opts['agg'],
        'keys': keys,
        'startTs': startTs,
        'endTs': endTs,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = DeferredResultResponseEntity;

      return this.apiClient.callApi(
        '/api/plugins/telemetry/{entityType}/{entityId}/values/timeseries{?interval,limit,agg,keys,startTs,endTs}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveDeviceAttributesUsingPOST operation.
     * @callback module:api/TelemetryControllerApi~saveDeviceAttributesUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeferredResultResponseEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * saveDeviceAttributes
     * @param {String} deviceId deviceId
     * @param {String} scope scope
     * @param {String} request request
     * @param {module:api/TelemetryControllerApi~saveDeviceAttributesUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeferredResultResponseEntity}
     */
    this.saveDeviceAttributesUsingPOST = function(deviceId, scope, request, callback) {
      var postBody = request;

      // verify the required parameter 'deviceId' is set
      if (deviceId === undefined || deviceId === null) {
        throw new Error("Missing the required parameter 'deviceId' when calling saveDeviceAttributesUsingPOST");
      }

      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling saveDeviceAttributesUsingPOST");
      }

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling saveDeviceAttributesUsingPOST");
      }


      var pathParams = {
        'deviceId': deviceId,
        'scope': scope
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = DeferredResultResponseEntity;

      return this.apiClient.callApi(
        '/api/plugins/telemetry/{deviceId}/{scope}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveEntityAttributesV1UsingPOST operation.
     * @callback module:api/TelemetryControllerApi~saveEntityAttributesV1UsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeferredResultResponseEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * saveEntityAttributesV1
     * @param {String} entityType entityType
     * @param {String} entityId entityId
     * @param {String} scope scope
     * @param {String} request request
     * @param {module:api/TelemetryControllerApi~saveEntityAttributesV1UsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeferredResultResponseEntity}
     */
    this.saveEntityAttributesV1UsingPOST = function(entityType, entityId, scope, request, callback) {
      var postBody = request;

      // verify the required parameter 'entityType' is set
      if (entityType === undefined || entityType === null) {
        throw new Error("Missing the required parameter 'entityType' when calling saveEntityAttributesV1UsingPOST");
      }

      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling saveEntityAttributesV1UsingPOST");
      }

      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling saveEntityAttributesV1UsingPOST");
      }

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling saveEntityAttributesV1UsingPOST");
      }


      var pathParams = {
        'entityType': entityType,
        'entityId': entityId,
        'scope': scope
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = DeferredResultResponseEntity;

      return this.apiClient.callApi(
        '/api/plugins/telemetry/{entityType}/{entityId}/{scope}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveEntityAttributesV2UsingPOST operation.
     * @callback module:api/TelemetryControllerApi~saveEntityAttributesV2UsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeferredResultResponseEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * saveEntityAttributesV2
     * @param {String} entityType entityType
     * @param {String} entityId entityId
     * @param {String} scope scope
     * @param {String} request request
     * @param {module:api/TelemetryControllerApi~saveEntityAttributesV2UsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeferredResultResponseEntity}
     */
    this.saveEntityAttributesV2UsingPOST = function(entityType, entityId, scope, request, callback) {
      var postBody = request;

      // verify the required parameter 'entityType' is set
      if (entityType === undefined || entityType === null) {
        throw new Error("Missing the required parameter 'entityType' when calling saveEntityAttributesV2UsingPOST");
      }

      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling saveEntityAttributesV2UsingPOST");
      }

      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling saveEntityAttributesV2UsingPOST");
      }

      // verify the required parameter 'request' is set
      if (request === undefined || request === null) {
        throw new Error("Missing the required parameter 'request' when calling saveEntityAttributesV2UsingPOST");
      }


      var pathParams = {
        'entityType': entityType,
        'entityId': entityId,
        'scope': scope
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = DeferredResultResponseEntity;

      return this.apiClient.callApi(
        '/api/plugins/telemetry/{entityType}/{entityId}/attributes/{scope}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveEntityTelemetryUsingPOST operation.
     * @callback module:api/TelemetryControllerApi~saveEntityTelemetryUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeferredResultResponseEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * saveEntityTelemetry
     * @param {String} entityType entityType
     * @param {String} entityId entityId
     * @param {String} scope scope
     * @param {String} requestBody requestBody
     * @param {module:api/TelemetryControllerApi~saveEntityTelemetryUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeferredResultResponseEntity}
     */
    this.saveEntityTelemetryUsingPOST = function(entityType, entityId, scope, requestBody, callback) {
      var postBody = requestBody;

      // verify the required parameter 'entityType' is set
      if (entityType === undefined || entityType === null) {
        throw new Error("Missing the required parameter 'entityType' when calling saveEntityTelemetryUsingPOST");
      }

      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling saveEntityTelemetryUsingPOST");
      }

      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling saveEntityTelemetryUsingPOST");
      }

      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling saveEntityTelemetryUsingPOST");
      }


      var pathParams = {
        'entityType': entityType,
        'entityId': entityId,
        'scope': scope
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = DeferredResultResponseEntity;

      return this.apiClient.callApi(
        '/api/plugins/telemetry/{entityType}/{entityId}/timeseries/{scope}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveEntityTelemetryWithTTLUsingPOST operation.
     * @callback module:api/TelemetryControllerApi~saveEntityTelemetryWithTTLUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DeferredResultResponseEntity} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * saveEntityTelemetryWithTTL
     * @param {String} entityType entityType
     * @param {String} entityId entityId
     * @param {String} scope scope
     * @param {Number} ttl ttl
     * @param {String} requestBody requestBody
     * @param {module:api/TelemetryControllerApi~saveEntityTelemetryWithTTLUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DeferredResultResponseEntity}
     */
    this.saveEntityTelemetryWithTTLUsingPOST = function(entityType, entityId, scope, ttl, requestBody, callback) {
      var postBody = requestBody;

      // verify the required parameter 'entityType' is set
      if (entityType === undefined || entityType === null) {
        throw new Error("Missing the required parameter 'entityType' when calling saveEntityTelemetryWithTTLUsingPOST");
      }

      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling saveEntityTelemetryWithTTLUsingPOST");
      }

      // verify the required parameter 'scope' is set
      if (scope === undefined || scope === null) {
        throw new Error("Missing the required parameter 'scope' when calling saveEntityTelemetryWithTTLUsingPOST");
      }

      // verify the required parameter 'ttl' is set
      if (ttl === undefined || ttl === null) {
        throw new Error("Missing the required parameter 'ttl' when calling saveEntityTelemetryWithTTLUsingPOST");
      }

      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling saveEntityTelemetryWithTTLUsingPOST");
      }


      var pathParams = {
        'entityType': entityType,
        'entityId': entityId,
        'scope': scope,
        'ttl': ttl
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = DeferredResultResponseEntity;

      return this.apiClient.callApi(
        '/api/plugins/telemetry/{entityType}/{entityId}/timeseries/{scope}/{ttl}', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
