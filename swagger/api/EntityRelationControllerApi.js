/**
 * Thingsboard REST API
 * For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.
 *
 * OpenAPI spec version: 2.0
 * Contact: info@thingsboard.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/EntityRelation', 'model/EntityRelationInfo', 'model/EntityRelationsQuery'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/EntityRelation'), require('../model/EntityRelationInfo'), require('../model/EntityRelationsQuery'));
  } else {
    // Browser globals (root is window)
    if (!root.ThingsboardRestApi) {
      root.ThingsboardRestApi = {};
    }
    root.ThingsboardRestApi.EntityRelationControllerApi = factory(root.ThingsboardRestApi.ApiClient, root.ThingsboardRestApi.EntityRelation, root.ThingsboardRestApi.EntityRelationInfo, root.ThingsboardRestApi.EntityRelationsQuery);
  }
}(this, function(ApiClient, EntityRelation, EntityRelationInfo, EntityRelationsQuery) {
  'use strict';

  /**
   * EntityRelationController service.
   * @module api/EntityRelationControllerApi
   * @version 2.0
   */

  /**
   * Constructs a new EntityRelationControllerApi. 
   * @alias module:api/EntityRelationControllerApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteRelationUsingDELETE operation.
     * @callback module:api/EntityRelationControllerApi~deleteRelationUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteRelation
     * @param {String} fromId fromId
     * @param {String} fromType fromType
     * @param {String} relationType relationType
     * @param {String} toId toId
     * @param {String} toType toType
     * @param {Object} opts Optional parameters
     * @param {String} opts.relationTypeGroup relationTypeGroup
     * @param {module:api/EntityRelationControllerApi~deleteRelationUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRelationUsingDELETE = function(fromId, fromType, relationType, toId, toType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fromId' is set
      if (fromId === undefined || fromId === null) {
        throw new Error("Missing the required parameter 'fromId' when calling deleteRelationUsingDELETE");
      }

      // verify the required parameter 'fromType' is set
      if (fromType === undefined || fromType === null) {
        throw new Error("Missing the required parameter 'fromType' when calling deleteRelationUsingDELETE");
      }

      // verify the required parameter 'relationType' is set
      if (relationType === undefined || relationType === null) {
        throw new Error("Missing the required parameter 'relationType' when calling deleteRelationUsingDELETE");
      }

      // verify the required parameter 'toId' is set
      if (toId === undefined || toId === null) {
        throw new Error("Missing the required parameter 'toId' when calling deleteRelationUsingDELETE");
      }

      // verify the required parameter 'toType' is set
      if (toType === undefined || toType === null) {
        throw new Error("Missing the required parameter 'toType' when calling deleteRelationUsingDELETE");
      }


      var pathParams = {
      };
      var queryParams = {
        'relationTypeGroup': opts['relationTypeGroup'],
        'fromId': fromId,
        'fromType': fromType,
        'relationType': relationType,
        'toId': toId,
        'toType': toType,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/relation{?relationTypeGroup,fromId,fromType,relationType,toId,toType}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteRelationsUsingDELETE operation.
     * @callback module:api/EntityRelationControllerApi~deleteRelationsUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteRelations
     * @param {String} entityId entityId
     * @param {String} entityType entityType
     * @param {String} id 
     * @param {String} type 
     * @param {module:api/EntityRelationControllerApi~deleteRelationsUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRelationsUsingDELETE = function(entityId, entityType, id, type, callback) {
      var postBody = null;

      // verify the required parameter 'entityId' is set
      if (entityId === undefined || entityId === null) {
        throw new Error("Missing the required parameter 'entityId' when calling deleteRelationsUsingDELETE");
      }

      // verify the required parameter 'entityType' is set
      if (entityType === undefined || entityType === null) {
        throw new Error("Missing the required parameter 'entityType' when calling deleteRelationsUsingDELETE");
      }

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling deleteRelationsUsingDELETE");
      }

      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling deleteRelationsUsingDELETE");
      }


      var pathParams = {
      };
      var queryParams = {
        'entityId': entityId,
        'entityType': entityType,
        'id': id,
        'type': type,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/relations{?entityId,entityType,id,type}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findByFromUsingGET operation.
     * @callback module:api/EntityRelationControllerApi~findByFromUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EntityRelation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * findByFrom
     * @param {String} fromId fromId
     * @param {String} fromType fromType
     * @param {String} relationType relationType
     * @param {Object} opts Optional parameters
     * @param {String} opts.relationTypeGroup relationTypeGroup
     * @param {module:api/EntityRelationControllerApi~findByFromUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EntityRelation>}
     */
    this.findByFromUsingGET = function(fromId, fromType, relationType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fromId' is set
      if (fromId === undefined || fromId === null) {
        throw new Error("Missing the required parameter 'fromId' when calling findByFromUsingGET");
      }

      // verify the required parameter 'fromType' is set
      if (fromType === undefined || fromType === null) {
        throw new Error("Missing the required parameter 'fromType' when calling findByFromUsingGET");
      }

      // verify the required parameter 'relationType' is set
      if (relationType === undefined || relationType === null) {
        throw new Error("Missing the required parameter 'relationType' when calling findByFromUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'relationTypeGroup': opts['relationTypeGroup'],
        'fromId': fromId,
        'fromType': fromType,
        'relationType': relationType,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [EntityRelation];

      return this.apiClient.callApi(
        '/api/relations{?relationTypeGroup,fromId,fromType,relationType}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findByFromUsingGET1 operation.
     * @callback module:api/EntityRelationControllerApi~findByFromUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EntityRelation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * findByFrom
     * @param {String} fromId fromId
     * @param {String} fromType fromType
     * @param {Object} opts Optional parameters
     * @param {String} opts.relationTypeGroup relationTypeGroup
     * @param {module:api/EntityRelationControllerApi~findByFromUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EntityRelation>}
     */
    this.findByFromUsingGET1 = function(fromId, fromType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fromId' is set
      if (fromId === undefined || fromId === null) {
        throw new Error("Missing the required parameter 'fromId' when calling findByFromUsingGET1");
      }

      // verify the required parameter 'fromType' is set
      if (fromType === undefined || fromType === null) {
        throw new Error("Missing the required parameter 'fromType' when calling findByFromUsingGET1");
      }


      var pathParams = {
      };
      var queryParams = {
        'relationTypeGroup': opts['relationTypeGroup'],
        'fromId': fromId,
        'fromType': fromType,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [EntityRelation];

      return this.apiClient.callApi(
        '/api/relations{?relationTypeGroup,fromId,fromType}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findByQueryUsingPOST2 operation.
     * @callback module:api/EntityRelationControllerApi~findByQueryUsingPOST2Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EntityRelation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * findByQuery
     * @param {module:model/EntityRelationsQuery} query query
     * @param {module:api/EntityRelationControllerApi~findByQueryUsingPOST2Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EntityRelation>}
     */
    this.findByQueryUsingPOST2 = function(query, callback) {
      var postBody = query;

      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling findByQueryUsingPOST2");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [EntityRelation];

      return this.apiClient.callApi(
        '/api/relations', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findByToUsingGET operation.
     * @callback module:api/EntityRelationControllerApi~findByToUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EntityRelation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * findByTo
     * @param {String} toId toId
     * @param {String} toType toType
     * @param {String} relationType relationType
     * @param {Object} opts Optional parameters
     * @param {String} opts.relationTypeGroup relationTypeGroup
     * @param {module:api/EntityRelationControllerApi~findByToUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EntityRelation>}
     */
    this.findByToUsingGET = function(toId, toType, relationType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'toId' is set
      if (toId === undefined || toId === null) {
        throw new Error("Missing the required parameter 'toId' when calling findByToUsingGET");
      }

      // verify the required parameter 'toType' is set
      if (toType === undefined || toType === null) {
        throw new Error("Missing the required parameter 'toType' when calling findByToUsingGET");
      }

      // verify the required parameter 'relationType' is set
      if (relationType === undefined || relationType === null) {
        throw new Error("Missing the required parameter 'relationType' when calling findByToUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'relationTypeGroup': opts['relationTypeGroup'],
        'toId': toId,
        'toType': toType,
        'relationType': relationType,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [EntityRelation];

      return this.apiClient.callApi(
        '/api/relations{?relationTypeGroup,toId,toType,relationType}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findByToUsingGET1 operation.
     * @callback module:api/EntityRelationControllerApi~findByToUsingGET1Callback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EntityRelation>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * findByTo
     * @param {String} toId toId
     * @param {String} toType toType
     * @param {Object} opts Optional parameters
     * @param {String} opts.relationTypeGroup relationTypeGroup
     * @param {module:api/EntityRelationControllerApi~findByToUsingGET1Callback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EntityRelation>}
     */
    this.findByToUsingGET1 = function(toId, toType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'toId' is set
      if (toId === undefined || toId === null) {
        throw new Error("Missing the required parameter 'toId' when calling findByToUsingGET1");
      }

      // verify the required parameter 'toType' is set
      if (toType === undefined || toType === null) {
        throw new Error("Missing the required parameter 'toType' when calling findByToUsingGET1");
      }


      var pathParams = {
      };
      var queryParams = {
        'relationTypeGroup': opts['relationTypeGroup'],
        'toId': toId,
        'toType': toType,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [EntityRelation];

      return this.apiClient.callApi(
        '/api/relations{?relationTypeGroup,toId,toType}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findInfoByFromUsingGET operation.
     * @callback module:api/EntityRelationControllerApi~findInfoByFromUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EntityRelationInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * findInfoByFrom
     * @param {String} fromId fromId
     * @param {String} fromType fromType
     * @param {Object} opts Optional parameters
     * @param {String} opts.relationTypeGroup relationTypeGroup
     * @param {module:api/EntityRelationControllerApi~findInfoByFromUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EntityRelationInfo>}
     */
    this.findInfoByFromUsingGET = function(fromId, fromType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fromId' is set
      if (fromId === undefined || fromId === null) {
        throw new Error("Missing the required parameter 'fromId' when calling findInfoByFromUsingGET");
      }

      // verify the required parameter 'fromType' is set
      if (fromType === undefined || fromType === null) {
        throw new Error("Missing the required parameter 'fromType' when calling findInfoByFromUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'relationTypeGroup': opts['relationTypeGroup'],
        'fromId': fromId,
        'fromType': fromType,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [EntityRelationInfo];

      return this.apiClient.callApi(
        '/api/relations/info{?relationTypeGroup,fromId,fromType}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findInfoByQueryUsingPOST operation.
     * @callback module:api/EntityRelationControllerApi~findInfoByQueryUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EntityRelationInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * findInfoByQuery
     * @param {module:model/EntityRelationsQuery} query query
     * @param {module:api/EntityRelationControllerApi~findInfoByQueryUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EntityRelationInfo>}
     */
    this.findInfoByQueryUsingPOST = function(query, callback) {
      var postBody = query;

      // verify the required parameter 'query' is set
      if (query === undefined || query === null) {
        throw new Error("Missing the required parameter 'query' when calling findInfoByQueryUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [EntityRelationInfo];

      return this.apiClient.callApi(
        '/api/relations/info', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the findInfoByToUsingGET operation.
     * @callback module:api/EntityRelationControllerApi~findInfoByToUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/EntityRelationInfo>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * findInfoByTo
     * @param {String} toId toId
     * @param {String} toType toType
     * @param {Object} opts Optional parameters
     * @param {String} opts.relationTypeGroup relationTypeGroup
     * @param {module:api/EntityRelationControllerApi~findInfoByToUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/EntityRelationInfo>}
     */
    this.findInfoByToUsingGET = function(toId, toType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'toId' is set
      if (toId === undefined || toId === null) {
        throw new Error("Missing the required parameter 'toId' when calling findInfoByToUsingGET");
      }

      // verify the required parameter 'toType' is set
      if (toType === undefined || toType === null) {
        throw new Error("Missing the required parameter 'toType' when calling findInfoByToUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'relationTypeGroup': opts['relationTypeGroup'],
        'toId': toId,
        'toType': toType,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = [EntityRelationInfo];

      return this.apiClient.callApi(
        '/api/relations/info{?relationTypeGroup,toId,toType}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRelationUsingGET operation.
     * @callback module:api/EntityRelationControllerApi~getRelationUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/EntityRelation} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getRelation
     * @param {String} fromId fromId
     * @param {String} fromType fromType
     * @param {String} relationType relationType
     * @param {String} toId toId
     * @param {String} toType toType
     * @param {Object} opts Optional parameters
     * @param {String} opts.relationTypeGroup relationTypeGroup
     * @param {module:api/EntityRelationControllerApi~getRelationUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/EntityRelation}
     */
    this.getRelationUsingGET = function(fromId, fromType, relationType, toId, toType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'fromId' is set
      if (fromId === undefined || fromId === null) {
        throw new Error("Missing the required parameter 'fromId' when calling getRelationUsingGET");
      }

      // verify the required parameter 'fromType' is set
      if (fromType === undefined || fromType === null) {
        throw new Error("Missing the required parameter 'fromType' when calling getRelationUsingGET");
      }

      // verify the required parameter 'relationType' is set
      if (relationType === undefined || relationType === null) {
        throw new Error("Missing the required parameter 'relationType' when calling getRelationUsingGET");
      }

      // verify the required parameter 'toId' is set
      if (toId === undefined || toId === null) {
        throw new Error("Missing the required parameter 'toId' when calling getRelationUsingGET");
      }

      // verify the required parameter 'toType' is set
      if (toType === undefined || toType === null) {
        throw new Error("Missing the required parameter 'toType' when calling getRelationUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'relationTypeGroup': opts['relationTypeGroup'],
        'fromId': fromId,
        'fromType': fromType,
        'relationType': relationType,
        'toId': toId,
        'toType': toType,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = EntityRelation;

      return this.apiClient.callApi(
        '/api/relation{?relationTypeGroup,fromId,fromType,relationType,toId,toType}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveRelationUsingPOST operation.
     * @callback module:api/EntityRelationControllerApi~saveRelationUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * saveRelation
     * @param {module:model/EntityRelation} relation relation
     * @param {module:api/EntityRelationControllerApi~saveRelationUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.saveRelationUsingPOST = function(relation, callback) {
      var postBody = relation;

      // verify the required parameter 'relation' is set
      if (relation === undefined || relation === null) {
        throw new Error("Missing the required parameter 'relation' when calling saveRelationUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/relation', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
