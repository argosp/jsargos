/**
 * Thingsboard REST API
 * For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.
 *
 * OpenAPI spec version: 2.0
 * Contact: info@thingsboard.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/RuleChain', 'model/RuleChainMetaData', 'model/TextPageDataRuleChain'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/RuleChain'), require('../model/RuleChainMetaData'), require('../model/TextPageDataRuleChain'));
  } else {
    // Browser globals (root is window)
    if (!root.ThingsboardRestApi) {
      root.ThingsboardRestApi = {};
    }
    root.ThingsboardRestApi.RuleChainControllerApi = factory(root.ThingsboardRestApi.ApiClient, root.ThingsboardRestApi.RuleChain, root.ThingsboardRestApi.RuleChainMetaData, root.ThingsboardRestApi.TextPageDataRuleChain);
  }
}(this, function(ApiClient, RuleChain, RuleChainMetaData, TextPageDataRuleChain) {
  'use strict';

  /**
   * RuleChainController service.
   * @module api/RuleChainControllerApi
   * @version 2.0
   */

  /**
   * Constructs a new RuleChainControllerApi. 
   * @alias module:api/RuleChainControllerApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the deleteRuleChainUsingDELETE operation.
     * @callback module:api/RuleChainControllerApi~deleteRuleChainUsingDELETECallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * deleteRuleChain
     * @param {String} ruleChainId ruleChainId
     * @param {module:api/RuleChainControllerApi~deleteRuleChainUsingDELETECallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.deleteRuleChainUsingDELETE = function(ruleChainId, callback) {
      var postBody = null;

      // verify the required parameter 'ruleChainId' is set
      if (ruleChainId === undefined || ruleChainId === null) {
        throw new Error("Missing the required parameter 'ruleChainId' when calling deleteRuleChainUsingDELETE");
      }


      var pathParams = {
        'ruleChainId': ruleChainId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = null;

      return this.apiClient.callApi(
        '/api/ruleChain/{ruleChainId}', 'DELETE',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getLatestRuleNodeDebugInputUsingGET operation.
     * @callback module:api/RuleChainControllerApi~getLatestRuleNodeDebugInputUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getLatestRuleNodeDebugInput
     * @param {String} ruleNodeId ruleNodeId
     * @param {module:api/RuleChainControllerApi~getLatestRuleNodeDebugInputUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.getLatestRuleNodeDebugInputUsingGET = function(ruleNodeId, callback) {
      var postBody = null;

      // verify the required parameter 'ruleNodeId' is set
      if (ruleNodeId === undefined || ruleNodeId === null) {
        throw new Error("Missing the required parameter 'ruleNodeId' when calling getLatestRuleNodeDebugInputUsingGET");
      }


      var pathParams = {
        'ruleNodeId': ruleNodeId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/ruleNode/{ruleNodeId}/debugIn', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRuleChainByIdUsingGET operation.
     * @callback module:api/RuleChainControllerApi~getRuleChainByIdUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RuleChain} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getRuleChainById
     * @param {String} ruleChainId ruleChainId
     * @param {module:api/RuleChainControllerApi~getRuleChainByIdUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RuleChain}
     */
    this.getRuleChainByIdUsingGET = function(ruleChainId, callback) {
      var postBody = null;

      // verify the required parameter 'ruleChainId' is set
      if (ruleChainId === undefined || ruleChainId === null) {
        throw new Error("Missing the required parameter 'ruleChainId' when calling getRuleChainByIdUsingGET");
      }


      var pathParams = {
        'ruleChainId': ruleChainId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = RuleChain;

      return this.apiClient.callApi(
        '/api/ruleChain/{ruleChainId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRuleChainMetaDataUsingGET operation.
     * @callback module:api/RuleChainControllerApi~getRuleChainMetaDataUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RuleChainMetaData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getRuleChainMetaData
     * @param {String} ruleChainId ruleChainId
     * @param {module:api/RuleChainControllerApi~getRuleChainMetaDataUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RuleChainMetaData}
     */
    this.getRuleChainMetaDataUsingGET = function(ruleChainId, callback) {
      var postBody = null;

      // verify the required parameter 'ruleChainId' is set
      if (ruleChainId === undefined || ruleChainId === null) {
        throw new Error("Missing the required parameter 'ruleChainId' when calling getRuleChainMetaDataUsingGET");
      }


      var pathParams = {
        'ruleChainId': ruleChainId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = RuleChainMetaData;

      return this.apiClient.callApi(
        '/api/ruleChain/{ruleChainId}/metadata', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getRuleChainsUsingGET operation.
     * @callback module:api/RuleChainControllerApi~getRuleChainsUsingGETCallback
     * @param {String} error Error message, if any.
     * @param {module:model/TextPageDataRuleChain} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getRuleChains
     * @param {String} limit limit
     * @param {Object} opts Optional parameters
     * @param {String} opts.textSearch textSearch
     * @param {String} opts.idOffset idOffset
     * @param {String} opts.textOffset textOffset
     * @param {module:api/RuleChainControllerApi~getRuleChainsUsingGETCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/TextPageDataRuleChain}
     */
    this.getRuleChainsUsingGET = function(limit, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'limit' is set
      if (limit === undefined || limit === null) {
        throw new Error("Missing the required parameter 'limit' when calling getRuleChainsUsingGET");
      }


      var pathParams = {
      };
      var queryParams = {
        'textSearch': opts['textSearch'],
        'idOffset': opts['idOffset'],
        'textOffset': opts['textOffset'],
        'limit': limit,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = TextPageDataRuleChain;

      return this.apiClient.callApi(
        '/api/ruleChains{?textSearch,idOffset,textOffset,limit}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveRuleChainMetaDataUsingPOST operation.
     * @callback module:api/RuleChainControllerApi~saveRuleChainMetaDataUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RuleChainMetaData} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * saveRuleChainMetaData
     * @param {module:model/RuleChainMetaData} ruleChainMetaData ruleChainMetaData
     * @param {module:api/RuleChainControllerApi~saveRuleChainMetaDataUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RuleChainMetaData}
     */
    this.saveRuleChainMetaDataUsingPOST = function(ruleChainMetaData, callback) {
      var postBody = ruleChainMetaData;

      // verify the required parameter 'ruleChainMetaData' is set
      if (ruleChainMetaData === undefined || ruleChainMetaData === null) {
        throw new Error("Missing the required parameter 'ruleChainMetaData' when calling saveRuleChainMetaDataUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = RuleChainMetaData;

      return this.apiClient.callApi(
        '/api/ruleChain/metadata', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the saveRuleChainUsingPOST operation.
     * @callback module:api/RuleChainControllerApi~saveRuleChainUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RuleChain} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * saveRuleChain
     * @param {module:model/RuleChain} ruleChain ruleChain
     * @param {module:api/RuleChainControllerApi~saveRuleChainUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RuleChain}
     */
    this.saveRuleChainUsingPOST = function(ruleChain, callback) {
      var postBody = ruleChain;

      // verify the required parameter 'ruleChain' is set
      if (ruleChain === undefined || ruleChain === null) {
        throw new Error("Missing the required parameter 'ruleChain' when calling saveRuleChainUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = RuleChain;

      return this.apiClient.callApi(
        '/api/ruleChain', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the setRootRuleChainUsingPOST operation.
     * @callback module:api/RuleChainControllerApi~setRootRuleChainUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RuleChain} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * setRootRuleChain
     * @param {String} ruleChainId ruleChainId
     * @param {module:api/RuleChainControllerApi~setRootRuleChainUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RuleChain}
     */
    this.setRootRuleChainUsingPOST = function(ruleChainId, callback) {
      var postBody = null;

      // verify the required parameter 'ruleChainId' is set
      if (ruleChainId === undefined || ruleChainId === null) {
        throw new Error("Missing the required parameter 'ruleChainId' when calling setRootRuleChainUsingPOST");
      }


      var pathParams = {
        'ruleChainId': ruleChainId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = RuleChain;

      return this.apiClient.callApi(
        '/api/ruleChain/{ruleChainId}/root', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the testScriptUsingPOST operation.
     * @callback module:api/RuleChainControllerApi~testScriptUsingPOSTCallback
     * @param {String} error Error message, if any.
     * @param {'String'} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * testScript
     * @param {String} inputParams inputParams
     * @param {module:api/RuleChainControllerApi~testScriptUsingPOSTCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link 'String'}
     */
    this.testScriptUsingPOST = function(inputParams, callback) {
      var postBody = inputParams;

      // verify the required parameter 'inputParams' is set
      if (inputParams === undefined || inputParams === null) {
        throw new Error("Missing the required parameter 'inputParams' when calling testScriptUsingPOST");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Authorization'];
      var contentTypes = ['application/json'];
      var accepts = ['*/*'];
      var returnType = 'String';

      return this.apiClient.callApi(
        '/api/ruleChain/testScript', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
