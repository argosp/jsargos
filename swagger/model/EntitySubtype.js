/**
 * Thingsboard REST API
 * For instructions how to authorize requests please visit <a href='http://thingsboard.io/docs/reference/rest-api/'>REST API documentation page</a>.
 *
 * OpenAPI spec version: 2.0
 * Contact: info@thingsboard.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/TenantId'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('./TenantId'));
  } else {
    // Browser globals (root is window)
    if (!root.ThingsboardRestApi) {
      root.ThingsboardRestApi = {};
    }
    root.ThingsboardRestApi.EntitySubtype = factory(root.ThingsboardRestApi.ApiClient, root.ThingsboardRestApi.TenantId);
  }
}(this, function(ApiClient, TenantId) {
  'use strict';




  /**
   * The EntitySubtype model module.
   * @module model/EntitySubtype
   * @version 2.0
   */

  /**
   * Constructs a new <code>EntitySubtype</code>.
   * @alias module:model/EntitySubtype
   * @class
   */
  var exports = function() {
    var _this = this;




  };

  /**
   * Constructs a <code>EntitySubtype</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/EntitySubtype} obj Optional instance to populate.
   * @return {module:model/EntitySubtype} The populated <code>EntitySubtype</code> instance.
   */
  exports.constructFromObject = function(data, obj) {
    if (data) {
      obj = obj || new exports();

      if (data.hasOwnProperty('entityType')) {
        obj['entityType'] = ApiClient.convertToType(data['entityType'], 'String');
      }
      if (data.hasOwnProperty('tenantId')) {
        obj['tenantId'] = TenantId.constructFromObject(data['tenantId']);
      }
      if (data.hasOwnProperty('type')) {
        obj['type'] = ApiClient.convertToType(data['type'], 'String');
      }
    }
    return obj;
  }

  /**
   * @member {module:model/EntitySubtype.EntityTypeEnum} entityType
   */
  exports.prototype['entityType'] = undefined;
  /**
   * @member {module:model/TenantId} tenantId
   */
  exports.prototype['tenantId'] = undefined;
  /**
   * @member {String} type
   */
  exports.prototype['type'] = undefined;


  /**
   * Allowed values for the <code>entityType</code> property.
   * @enum {String}
   * @readonly
   */
  exports.EntityTypeEnum = {
    /**
     * value: "TENANT"
     * @const
     */
    "TENANT": "TENANT",
    /**
     * value: "CUSTOMER"
     * @const
     */
    "CUSTOMER": "CUSTOMER",
    /**
     * value: "USER"
     * @const
     */
    "USER": "USER",
    /**
     * value: "DASHBOARD"
     * @const
     */
    "DASHBOARD": "DASHBOARD",
    /**
     * value: "ASSET"
     * @const
     */
    "ASSET": "ASSET",
    /**
     * value: "DEVICE"
     * @const
     */
    "DEVICE": "DEVICE",
    /**
     * value: "ALARM"
     * @const
     */
    "ALARM": "ALARM",
    /**
     * value: "RULE_CHAIN"
     * @const
     */
    "RULE_CHAIN": "RULE_CHAIN",
    /**
     * value: "RULE_NODE"
     * @const
     */
    "RULE_NODE": "RULE_NODE",
    /**
     * value: "ENTITY_VIEW"
     * @const
     */
    "ENTITY_VIEW": "ENTITY_VIEW",
    /**
     * value: "WIDGETS_BUNDLE"
     * @const
     */
    "WIDGETS_BUNDLE": "WIDGETS_BUNDLE",
    /**
     * value: "WIDGET_TYPE"
     * @const
     */
    "WIDGET_TYPE": "WIDGET_TYPE"  };


  return exports;
}));


